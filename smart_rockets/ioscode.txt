var population
var lifespan = 400
var count
var target
var gen
var maxfitpoints = []

function setup() {
	createCanvas(windowWidth, windowHeight)
	population = new Population()
	count = 0
	gen = 1
	target = createVector(width/2, 50)
}

function draw() {
	background(51)
	
	population.run()
	ellipse(target.x, target.y, 16)
	stroke(255)
	fill(255)
	textSize(23)
	textAlign(LEFT, TOP)
	text(count, 10, 10)
	text("Generation: " + gen, 10, 40)
	
	count++
	
	if (count == lifespan){
		population.evaluate()
		population.selection()
		count = 0
		gen++
	}
	push()
	stroke(255, 0, 0)
	strokeWeight(4)
	
	for (var i = 0; i < maxfitpoints.length - 1; i += 5){
		var point1 = maxfitpoints[i]
		point(point1.x, point1.y)
	}
	pop()
	
}

function DNA(genes){
	
	if (genes){
		this.genes = genes
	} else {
		this.genes = []
		
		for (var i = 0; i < lifespan; i++){
			this.genes.push(p5.Vector.random2D())
			this.genes[i].setMag(0.2)
		}
	}
	
	this.crossover = function(other){
		var newGenes = []
		var mid = floor(random(this.genes.length))
		for (var i = 0; i < this.genes.length; i++){
			if (i > mid){
				newGenes[i] = this.genes[i]
			} else {
				newGenes[i] = other.genes[i]
			}
		}
		return new DNA(newGenes)
	}
	
	this.mutate = function(){
		for (var i = 0; i < this.genes.length; i++){
			if (random(1) < 0.01){
				this.genes[i] = p5.Vector.random2D()
				this.genes[i].setMag(0.2)
			}
		}
	}
	
}

function Rocket(dna){
	
	if (dna){
		this.dna = dna
	} else {
		this.dna = new DNA()
	}
	
	this.pos = createVector(width/2, height)
	this.vel = createVector(0, -1)
	this.acc = createVector(0, 0)
	this.fitness = 0
	this.completed = false
	this.crashed = false
	this.points = []
	this.points.push(this.pos.copy())
	this.finishtime = lifespan

	this.calcFitness = function(){
		var d = dist(this.pos.x, this.pos.y, target.x, target.y)
		this.fitness = map(d, 0, width, width, 0)
		this.fitness /= this.finishtime / 100
		
		if (this.completed){
			this.fitness *= 10
		} else if (this.crashed){
			this.fitness /= 10
		}
		this.fitness = pow(this.fitness, 4)
	}
	
	this.applyForce = function(force){
		this.acc.add(force)
	}
	
	this.update = function(){
		
		if (dist(this.pos.x, this.pos.y, target.x, target.y) < 10){
			this.pos = target.copy()
			this.completed = true
			this.finishtime = count
		}
		if (this.pos.x > width || this.pos.x < 0 || this.pos.y > height || this.pos.y < 0){
			this.crashed = true
		}
		
		this.applyForce(this.dna.genes[count])
		if (!this.completed && !this.crashed){
			this.vel.add(this.acc)
			this.pos.add(this.vel)
			this.acc.mult(0)
			this.vel.limit(4)
			
			this.points.push(this.pos.copy())
		}
	}
	
	this.show = function(){
		push()
		noStroke()
		rectMode(CENTER)
		var d = dist(this.pos.x, this.pos.y, target.x, target.y)
		var color = map(d, 0, width, 0, 255)
		colorMode(HSB)
		fill(color, 255, 255, 150)
		translate(this.pos.x, this.pos.y)
		rotate(this.vel.heading())
		rect(0, 0, 50, 10)
		pop()
		stroke(255)
	}
	
}

function Population(){
	this.rockets = []
	this.popsize = 25
	this.matingpool = []
	this.fittestpoints
	
	for (var i = 0; i < this.popsize; i++){
		this.rockets[i] = new Rocket()
	}
	
	this.evaluate = function(){
		
		var maxFit = 0
		
		for (var i = 0; i < this.popsize; i++){
			this.rockets[i].calcFitness()
			if (this.rockets[i].fitness > maxFit){
				maxFit = this.rockets[i].fitness
				this.fittestpoints = this.rockets[i].points
			}
		}
		
		for (var i = 0; i < this.popsize; i++){
			this.rockets[i].fitness /= maxFit
		}
		
		this.matingpool = []
		for (var i = 0; i < this.popsize; i++){
			var n = this.rockets[i].fitness * 100
			for (var j = 0; j < n; j++){
				this.matingpool.push(this.rockets[i])
			}
		}
	}
	
	this.selection = function(){
		var newRockets = []
		for (var i = 0; i < this.rockets.length; i++){
			var parentA = random(this.matingpool).dna
			var parentB = random(this.matingpool).dna
			var child = parentA.crossover(parentB)
			child.mutate()
			newRockets[i] = new Rocket(child)
		}
		this.rockets = newRockets
		maxfitpoints = this.fittestpoints
	}
	
	this.run = function(){
		for (var i = 0; i < this.rockets.length; i++){
			this.rockets[i].update()
			this.rockets[i].show()
		}
	}
	
}